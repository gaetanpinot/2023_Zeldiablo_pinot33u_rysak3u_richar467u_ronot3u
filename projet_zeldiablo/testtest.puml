@startuml
class Perso {
+ boolean etreEnFace(Personnage)
}
interface Graphe {
~ List<String> listeNoeuds()
~ List<Arc> suivants(String)
}
class CaseFermeture {
~ Porte p
~ void event(Personnage)
}
class Fantome {
}
class GrapheLabyrinthe {
- Labyrinthe laby
+ List<String> listeNoeuds()
+ List<Arc> suivants(String)
+ int[] suivantValide(String,int,int)
+ {static} int[] extraireCoordonnees(String)
+ boolean coorValide(int,int)
+ Labyrinthe getLaby()
}
abstract class CaseDeclencheur {
- int x
~ {abstract}void event(Personnage)
+ int getY()
+ int getX()
}
class Personnage {
~ int x
~ boolean attaque
~ int maxVie
+ String orientation
+ boolean getAttaque()
+ void setAttaque(boolean)
+ boolean etrePresent(int,int)
+ int getX()
+ int getY()
+ void ajouterVie(int)
+ int getVie()
+ int getMaxVie()
+ void attaquer(Personnage)
+ boolean estACoter(Personnage)
+ boolean etreMort()
}
class Main {
+ {static} void main(String[])
}
interface Intelligence {
~ String NULLE
~ String FAIBLE
~ String MOYENNE
~ String INTELLIGENT
~ String[] intelligence
}
class BellmanFord {
+ Valeur resoudre(Graphe,String)
}
class Noeud {
- String nom
- List<Arc> adj
+ String getNom()
+ List<Arc> getAdj()
+ boolean equals(Object)
+ void ajouterArc(String,double)
+ String adjString()
}
class CaseOuverture {
~ Porte p
~ void event(Personnage)
}
class LabyJeu {
+ Labyrinthe laby
+ Labyrinthe getLaby()
+ void update(double,Clavier)
+ void init()
+ boolean etreFini()
}
class Valeur {
~ Map<String,Double> valeur
~ Map<String,String> parent
+ void setValeur(String,double)
+ void setParent(String,String)
+ String getParent(String)
+ double getValeur(String)
+ String toString()
+ List<String> calculerChemin(String)
}
class Arc {
- String dest
- double cout
+ String getDest()
+ double getCout()
+ String toString()
+ String toGraphviz()
}
class MainLaby {
+ {static} void main(String[])
}
class Porte {
~ int x
- boolean ferme
~ boolean etrePresent(int,int)
+ boolean etreFerme()
+ void setFerme(boolean)
+ boolean estTraversable(int,int)
}
class Labyrinthe {
+ {static} char MUR
+ {static} char PJ
+ {static} char VIDE
+ {static} String HAUT
+ {static} String BAS
+ {static} String GAUCHE
+ {static} String DROITE
+ {static} char MONSTRE
+ Perso pj
+ ArrayList<Monstre> monstre
+ boolean[][] murs
+ ArrayList<CaseDeclencheur> caseD
~ Porte p
+ {static} int[] getSuivant(int,int,String)
+ void ajouterCaseDeclencheur(CaseDeclencheur)
+ boolean monstrePresent(int,int)
+ boolean cooorValideMonstre(int,int)
+ Monstre monstreEnXY(int,int)
+ int[] genererCoorValid()
+ void deplacerPerso(String,Personnage)
+ void retirerMonstreMort()
+ boolean etreFini()
+ int getLengthY()
+ int getLength()
+ boolean getMur(int,int)
+ ArrayList<Monstre> getMonstre()
+ Porte getPorte()
+ void persoAttaquerMonstre()
+ void deplacerIntelligenceMoyenne(Monstre)
+ void deplacerIntellifenceUltime(Monstre)
+ void deplacerMonstreintelligence(Monstre)
}
class LabyDessin {
+ void dessinerJeu(Jeu,Canvas)
}
class Troll {
+ void regenerer()
}
class CasePiege {
~ boolean ammorce
~ boolean passerDessus
+ void event(Personnage)
+ boolean getPasserDessus()
}
class Monstre {
- String intelligence
+ String getIntelligence()
+ void setIntelligence(String)
}


Personnage <|-- Perso
CaseDeclencheur <|-- CaseFermeture
Monstre <|-- Fantome
Graphe <|.. GrapheLabyrinthe
CaseDeclencheur <|-- CaseOuverture
Jeu <|.. LabyJeu
DessinJeu <|.. LabyDessin
Monstre <|-- Troll
CaseDeclencheur <|-- CasePiege
Intelligence <|.. Monstre
Personnage <|-- Monstre
@enduml